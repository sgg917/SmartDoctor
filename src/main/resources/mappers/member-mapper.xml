<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	
	<resultMap id="memberResult" type="Member">
		<result column="emp_no" property="empNo" />
		<result column="emp_name" property="empName" />
		<result column="emp_pwd" property="empPwd" />
		<result column="phone" property="phone" />
		<result column="email" property="email" />
		<result column="profile_originname" property="originName" />
		<result column="profile_path" property="path" />
		<result column="status" property="status" />
		<result column="vac_all" property="vacAll" />
		<result column="job_no" property="jobNo" />
		<result column="dept_no" property="deptNo" />
		<result column="job_name" property="jobName" />
		<result column="dept_name" property="deptName" />
	</resultMap>
	
	<resultMap id="deptResult" type="Dept">
		<result column="dept_no" property="deptNo" />
		<result column="upper_no" property="upperNo" />
		<result column="dept_name" property="deptName" />
		<result column="level" property="level"/>
	</resultMap>
	
	<!-- 사용자_결재라인 조직도 리스트 조회 -->
	<select id="selectApprLineList" resultMap="memberResult">
		select
			   emp_no
			 , emp_name
			 , m.dept_no
			 , upper_no
			 , dept_name
			 , job_name
		  from member m 
		  left join department d on (m.dept_no = d.dept_no)
		  join job j on (m.job_no = j.job_no)
		 where status in ('Y', 'A')
		 order
		    by m.job_no
	</select>
	
	<!-- 사용자_결재라인 조직도 부서 조회 -->
	<select id="selectApprLineDept" resultMap="deptResult">
		select
		       dept_no
		     , dept_name
		     , upper_no
		  from department
	</select>
	
	<!-- 사용자_결재라인 사원 조회 -->
	<select id="selectApprEmp" resultMap="memberResult">
		select
			   emp_no
		     , emp_name
		     , dept_name
		     , job_name
		  from member
		  join department using (dept_no)
		  join job using (job_no)
		 where emp_no = #{empNo}
	</select>
	
	<!-- 사원 휴가_전체 사원 수 조회  -->
	<select id="selectListCount" resultType="_int">
		select count(*)
  		  from member
  		 where status in ('Y', 'A')
	</select>
	
	<!-- 사원 휴가_전체 사원 조회 -->
	<select id="selectMemberList" resultMap="memberResult">
		select e.emp_no
		     , e.emp_name
		     , vac_all
		     , d.dept_no
		     , case when d.dept_name = e.dept_name then d.dept_name
		            when d.dept_name != e.dept_name then d.dept_name || ' ' || e.dept_name
		        end "dept_name"
		  from (
		        select 
		               emp_no
		             , emp_name
		             , vac_all
		             , dept_name
		             , case when d.upper_no = 0 then d.dept_no
		                    else d.upper_no
		                end as dept_no
		          from member m
		          left join department d on (d.dept_no = m.dept_no)
		          where status in ('Y', 'A')
		        ) e
		  left join department d on(e.dept_no = d.dept_no)
		 order by e.dept_no, emp_name
	</select>
	
	<!-- 사원 휴가_부서, 이름으로 검색한 사원 수 조회 -->
	<select id="ajaxSearchListCount" resultType="_int">
		select count(*)
		  from (
		        select e.emp_no
				     , e.emp_name
				     , vac_all
				     , case when d.dept_name = e.dept_name then d.dept_name
				            when d.dept_name != e.dept_name then d.dept_name || ' ' || e.dept_name
				        end "dept_name"
				  from (
				        select 
				               emp_no
				             , emp_name
				             , vac_all
				             , dept_name
				             , case when d.upper_no = 0 then d.dept_no
				                    else d.upper_no
				                end as dept_no
				          from member m
				          left join department d on (d.dept_no = m.dept_no)
				         where status in ('Y', 'A')
				        ) e
				  left join department d on(e.dept_no = d.dept_no)
					 <choose>
			         	<when test="type == 'dept_name'">
			         		where e.dept_name like '%' || #{keyword} || '%'
			         		   or d.dept_name like '%' || #{keyword} || '%'
			         	</when>
			         	<otherwise>
			         		where emp_name like '%' || #{keyword} || '%'
			         	</otherwise>
			         </choose>
			         order by e.dept_no, emp_name
		        )
	</select>
	
	<!-- 사원 휴가_부서, 이름으로 검색한 사원 리스트 조회 -->
	<select id="ajaxSearchList" resultMap="memberResult">
	select e.emp_no
	     , e.emp_name
	     , vac_all
	     , case when d.dept_name = e.dept_name then d.dept_name
	            when d.dept_name != e.dept_name then d.dept_name || ' ' || e.dept_name
	        end "dept_name"
	  from (
	        select 
	               emp_no
	             , emp_name
	             , vac_all
	             , dept_name
	             , case when d.upper_no = 0 then d.dept_no
	                    else d.upper_no
	                end as dept_no
	          from member m
	          left join department d on (d.dept_no = m.dept_no)
	         where status in ('Y', 'A')
	        ) e
	  left join department d on(e.dept_no = d.dept_no)
		 <choose>
         	<when test="type == 'dept_name'">
         		where e.dept_name like '%' || #{keyword} || '%'
         		   or d.dept_name like '%' || #{keyword} || '%'
         	</when>
         	<otherwise>
         		where emp_name like '%' || #{keyword} || '%'
         	</otherwise>
         </choose>
         order by e.dept_no, emp_name
	</select>
	
	<!-- 조직도 부서 조회 -->
	<select id="selectOrgChartDept" resultMap="deptResult">
		select 
		       dept_no
		     , dept_name
		     , upper_no
		     , level
		  from department
		start with upper_no=0
		connect by prior dept_no = upper_no
		order siblings by dept_no
	</select>
	
	<!-- 조직도 사원 조회 -->
	<select id="selectOrgChartEmp" resultMap="memberResult">
		select 
		       emp_no
		     , emp_name
		     , phone
		     , profile_originname
		     , job_name
		     , dept_no
		     , upper_no
		  from member
		  join job using(job_no)
		  left join department using (dept_no)
		 where status in ('Y', 'A')
		  order by job_no, emp_name
	</select>
	
	<!-- 부서별 사원 수 조회 -->
	<select id="selectEmpCount" resultType="_int">
		select count(*)
		  from member m
		  left join department d on (d.dept_no = m.dept_no)
		 where m.status in ('Y', 'A')
		<choose>
			<when test="upperNo == 0 and deptNo == 0">
				and d.dept_no is null
			  group by d.dept_no
			</when>
			<when test="upperNo == 0 and deptNo != 0 and deptNo &lt; 3">
				and upper_no = #{deptNo}
			  group by upper_no
			</when>
			<otherwise>
				and upper_no = #{upperNo}
				and d.dept_no = #{deptNo}
			  group by d.dept_no
			</otherwise>
		</choose>
	</select>
	
	<!-- 부서별 사원 조회 -->
	<select id="selectEmp" resultMap="memberResult">
		select 
		       emp_no
		     , emp_name
		     , phone
		     , profile_path
		     , dept_name
		     , job_name
		     , d.dept_no
		     , upper_no
		     , j.job_no
		  from member m
		  left join department d on (d.dept_no = m.dept_no)
		  left join job j on (j.job_no = m.job_no)
		 where m.status in ('Y', 'A')
		<choose>
			<when test="upperNo == 0 and deptNo == 0">
				and d.dept_no is null
			  order by d.dept_no
			</when>
			<when test="upperNo == 0 and deptNo != 0 and deptNo &lt; 3">
				and upper_no = #{deptNo}
			  order by upper_no, emp_name
			</when>
			<otherwise>
				and upper_no = #{upperNo}
				and d.dept_no = #{deptNo}
			  order by m.job_no, emp_name
			</otherwise>
		</choose>
	</select>
	
	<!-- 로그인한 사원 정보 조회 -->
	<select id="loginMember" resultMap="memberResult">
		select 
			    emp_no
			  , emp_name
			  , emp_pwd
			  , phone
			  , email
			  , profile_originname
			  , profile_path
			  , status
			  , vac_all
			  , job_no
			  , dept_no
			  , job_name
			  , dept_name
		   from member
           join job using (job_no)
           left join department using (dept_no)
		  where (status = 'Y' 
             or status = 'A')
		    and emp_no = #{empNo}
		    <!-- and emp_pwd = #{empPwd} -->
	</select>

	<!-- 비밀번호 변경 -->
	<update id="updatePwd">
		update
			   member
		   set emp_pwd = #{updatePwd}
		 where emp_no = #{empNo}
	</update>
	
	<!-- 직원 가입 -->
	<insert id="insertMember">
		insert
		  into member
		  (
		    emp_no
		  , emp_name
		  , emp_pwd
		  , phone
		  , email
		  , profile_originname
		  , profile_path
		  , job_no
		  , dept_no
		  )
		  values
		  (
		    #{empNo}
		  , #{empName}
		  , #{empPwd}
		  , #{phone}
		  , #{email}
		  , #{originName}
		  , #{path}
		  , #{jobNo}
		  , #{deptNo}
		  )
	</insert>
	
	<!-- 조직도 사원 삭제(퇴사처리) -->
	<update id="deleteEmp">
		update member
	   	   set status = 'N'
	     where emp_no = #{empNo}
	</update>
	
	<!-- 조직도 사원 정보 수정 -->
	<update id="updateEmp">
		update member
		   set emp_name = #{empName}
		     , job_no = #{jobNo}
		     , phone = #{phone}
	<if test="deptNo == 4">
		<choose>
			<when test="jobNo == 6 or jobNo == 7">
				, status = 'A'
			</when>
			<otherwise>
				, status = 'Y'
			</otherwise>
		</choose>
	</if>
		 where emp_no = #{empNo}
	</update>
	
	<!-- 조직도 부서명 수정 -->
	<update id="updateDept">
		update department
		   set dept_name = #{deptName}
		 where dept_no = #{deptNo}
	</update>
	
	<!-- 조직도 부서 삭제 -->
	<delete id="deleteDept">
		delete from department
		 where dept_no = #{deptNo}
	</delete>
	
	<!-- 조직도 부서 추가 -->
	<insert id="insertDept">
		insert
		  into department
		  (
		    dept_no
		  , upper_no
		  , dept_name
		  )
		  values
		  (
		    seq_dno.nextval
		  , 0
		  , #{deptName}
		  )
	</insert>
	
	<!-- 관리자로 status 수정 -->
	<update id="updateAdmin">
		update 
		       member
		   set status = 'A'
		 where emp_no = #{empNo}
	</update>

</mapper>
